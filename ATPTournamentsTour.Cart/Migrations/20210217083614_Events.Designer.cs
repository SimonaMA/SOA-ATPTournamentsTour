// <auto-generated />
using System;
using ATPTournamentsTour.Cart.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ATPTournamentsTour.Cart.Migrations
{
    [DbContext(typeof(CartDbContext))]
    [Migration("20210217083614_Events")]
    partial class Tournaments
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ATPTournamentsTour.Cart.Entities.Cart", b =>
                {
                    b.Property<Guid>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("CartId");

                    b.ToTable("Carts");

                    b.HasData(
                        new
                        {
                            CartId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            UserId = new Guid("6c9fe94e-257a-42e2-a49c-1b216d4e81be")
                        });
                });

            modelBuilder.Entity("ATPTournamentsTour.Cart.Entities.CartItem", b =>
                {
                    b.Property<Guid>("CartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CartId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TournamentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TicketAmount")
                        .HasColumnType("int");

                    b.HasKey("CartItemId");

                    b.HasIndex("CartId");

                    b.HasIndex("TournamentId");

                    b.ToTable("CartItems");

                    b.HasData(
                        new
                        {
                            CartItemId = new Guid("75918bea-7a04-406e-bafd-51dc8b98816f"),
                            CartId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            TournamentId = new Guid("e29f3df4-d9b4-4182-84dc-4289ac17c0c0"),
                            TicketAmount = 3
                        },
                        new
                        {
                            CartItemId = new Guid("bec71e6b-6b3d-444e-85d7-77bdb3988908"),
                            CartId = new Guid("d28888e9-2ba9-473a-a40f-e38cb54f9b35"),
                            TournamentId = new Guid("39144996-8bad-4cb8-9029-125d88808377"),
                            TicketAmount = 2
                        });
                });

            modelBuilder.Entity("ATPTournamentsTour.Cart.Entities.Tournament", b =>
                {
                    b.Property<Guid>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("TournamentName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("ATPTournamentsTour.Cart.Entities.CartItem", b =>
                {
                    b.HasOne("ATPTournamentsTour.Cart.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ATPTournamentsTour.Cart.Entities.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
